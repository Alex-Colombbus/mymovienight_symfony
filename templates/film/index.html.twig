{% extends 'base2.html.twig' %} {% block title %}Films - My movie night{%
endblock %} {% block main %}
<div
  id="notifications-container"
  class="position-fixed top-0 start-50 translate-middle-x p-3"
  style="z-index: 1050; max-width: 500px; width: 100%"
>
  <!-- Les messages seront ajoutés ici dynamiquement -->
</div>
<div class="container-fluid">
  <div class="container">
    <div class="row justify-content-evenly align-items-center">
      <div
        class="col-sm-12 col-md-11 col-lg-5 d-flex flex-column justify-content-center"
      >
        <div class="container d-flex justify-content-center">
          <img
            src=""
            alt="affiche du film "
            class="img-film rounded-1 posterFilm"
          />
        </div>
        <div
          class="container col-12 col-sm-12 col-md-8 d-flex justify-content-around fs-3 mt-3 mb-3 mb-md-3 mb-lg-0"
        >
          {% if app.user %}
          <div class="col-6 d-flex justify-content-start align-items-center">
            <button class="boutonSendData border border-0" id="sendDataListRef">
              <i
                class="bi bi-x-circle icone-dynamique"
                id="iconeRefusal"
                title="Ajouter aux refus, ne plus jamais le voir"
              ></i>
            </button>
            <p class="fs-6 text-primary m-2">refus</p>
          </div>
          <div class="col-6 d-flex justify-content-end align-items-center">
            <p class="fs-6 text-primary m-2">favoris</p>
            <button
              class="boutonSendData pt-1 border border-0"
              id="sendDataListFav"
            >
              <i
                class="bi bi-heart icone-dynamique"
                id="iconeHeart"
                title="Ajouter aux favoris"
              ></i>
            </button>
          </div>
          {% else %}
          <p class="fs-6 text-primary m-0">
            Connectez-vous pour ajouter aux favoris
          </p>
          {% endif %}
        </div>
      </div>
      <div
        class="col-1 d-none d-sm-none d-md-none d-lg-block d-flex justify-content-start"
      >
        <div class="middlebar m-0"></div>
      </div>
      <div class="col-sm-12 col-md-11 col-lg-5 d-flex flex-column">
        <div
          class="col-12 mb-4 d-flex flex-column justify-content-center align-items-center"
        >
          <h2
            class="text-center fw-bold fs-1 titleFilm color-texte-accentuation"
          ></h2>
          <h5
            class="text-center infoFilm surlignement fw-light fw-bold fs-5"
          ></h5>
        </div>
        <div class="row importantCrew my-3 my-md-2"></div>
        <h4 class="fw-bold color-texte-accentuation">Synopsis</h4>
        <p class="synopsisFilm"></p>
        <h5 class="surlignement">Acteurs principaux</h5>
        <ul class="row actorsFilm"></ul>

        <div class="container">
          <div class="row d-flex align-items-center">
            <div
              class="imdbRating col-6 text-center fw-bold d-flex align-items-center justify-content-center"
              title="Note IMDb"
            ></div>
            <div
              class="tmdbRating col-6 text-center fw-bold d-flex align-items-center justify-content-center"
              title="Note TMDB"
            ></div>
          </div>
        </div>
      </div>
    </div>
    <div class="row d-flex justify-content-around align-items-center mt-3">
      <button
        type="button"
        class="btn btn-changement bouttonPrecedent d-flex justify-content-center align-items-center p-0 col-2"
        title="Film suivant"
      >
        <span class="arrowLeft"><i class="bi bi-arrow-left fs-3"></i></span>
      </button>

      <a
        class="col-3 text-center rounded-5"
        href="{{ path('app_liste_favorites') }}"
      >
        <button type="button" class="btn btn-film py-2 px-3 fs-5">
          Voir ma liste
        </button>
      </a>

      <button
        type="button"
        class="btn btn-changement bouttonSuivant d-flex justify-content-center align-items-center p-0 col-2"
        title="Film suivant"
      >
        <div
          class="visually-hidden spinner-border text-primary mx-2"
          role="status"
        ></div>
        <span class="arrowRight"><i class="bi bi-arrow-right fs-3"></i></span>
      </button>
    </div>
  </div>
  <input type="hidden" id="filmToList" name="filmList" value="" />
</div>

<script>

    document.addEventListener('DOMContentLoaded', function () {
      // Récupérer la variable PHP encodée en JSON par Twig
      // Le filtre |json_encode s'occupe de la conversion et de l'échappement.
      // Le filtre |raw est important ici pour que les guillemets du JSON ne soient pas double-échappés par Twig.
      let films = [];
      films = {{ films|json_encode|raw }};
      console.log(films);
      // films est un tableau d'objets
      // page représente l'index du film actuellement affiché
      let page = 0;

      let titleFilm = document.querySelector('.titleFilm');
      titleFilm.textContent = films[page].title;

      // On remplace le src de l'image par l'url de l'affiche du film
      let posterFilm = document.querySelector('.posterFilm');
      posterFilm.src = (films[page].posterPath !== null) ? 'https://image.tmdb.org/t/p/original' + films[page].posterPath : "{{ asset('images/pas_de_poster.jpg') }}";

      let infoFilm = document.querySelector('.infoFilm');
      //  /,/ selectionne la virgule, g signifie toutes les occurences et ", " est le caractère qui va remplacer la virgule
      infoFilm.textContent = films[page].releaseDate + ' - ' + films[page].genres.replace(/,/g, ", ") + ' - ' + films[page].duration;

      let synopsis = document.querySelector('.synopsisFilm');
      synopsis.textContent = films[page].synopsis;

      let importantCrew = document.querySelector('.importantCrew');
      let importantCrewObjet = films[page].importantCrew;
      // On appelle la fonction getImportantCrew pour afficher les membres de l'équipe
      getImportantCrew(importantCrewObjet);

      let filmToList = films[page];
      let bouttonSendListFav = document.querySelector('#sendDataListFav');
      let bouttonSendListRef = document.querySelector('#sendDataListRef');
      let iconeHeart = document.querySelector('#iconeHeart');
      let iconeRef = document.querySelector('#iconeRefusal');
      let spinner = document.querySelector('.spinner-border');

      let arrowRight = document.querySelector('.arrowRight');





      function getImportantCrew(importantCrewObjet) {
        importantCrew.innerHTML = ''
        Object.entries(importantCrewObjet).forEach(([key, value]) => { // On utilise la déstructuration d'array [key, valeur]
          let divCrew = document.createElement('div');
          divCrew.classList.add('col-4');

          let jobCrew = document.createElement('h5')
          jobCrew.classList.add('surlignement');
          jobCrew.textContent = value;
          divCrew.append(jobCrew);
          let nameCrew = document.createElement('p')
          nameCrew.textContent = key;

          divCrew.append(nameCrew);
          importantCrew.append(divCrew);
        });
      }

      let actorsFilm = document.querySelector('.actorsFilm');
      let actors = films[0].actors;

      getActorsFilm(actors, actorsFilm);

      function getActorsFilm(actors, actorsFilm) {
        actorsFilm.innerHTML = ''
        actors.forEach(actor => {
          let liActor = document.createElement('li');
          liActor.classList.add('col');
          liActor.textContent = actor;
          actorsFilm.append(liActor);
        });
      }

      // Réactive le bouton "suivant" si la page est restaurée depuis le cache du navigateur (back/forward)
      window.addEventListener('pageshow', function () {
        bouttonSuivant.removeAttribute('disabled');
      });

      let imdbRating = document.querySelector('.imdbRating');
      let tmdbRating = document.querySelector('.tmdbRating');
      getRating(imdbRating, tmdbRating, 0);

      function getRating(imdbRating, tmdbRating, page) {
        imdbRating.replaceChildren();
        lienImdb = document.createElement('a');
        lienImdb.href = 'https://www.imdb.com/title/' + films[page].tconst;
        lienImdb.target = '_blank';
        imdbRating.append(lienImdb);
        iconeImdb = document.createElement('img');
        iconeImdb.src = "{{ asset('images/imdb_icone.png') }}";
        iconeImdb.classList.add('iconeRating');
        iconeImdb.alt = 'icone imdb';
        lienImdb.textContent = "  " + films[page].imdbRating;
        lienImdb.prepend(iconeImdb);
        imdbRating.prepend(lienImdb);
        if (films[page].tmdbRating === null || films[page].tmdbRating === 0) {
          tmdbRating.textContent = '';
        } else {
          tmdbRating.replaceChildren();
          lienTmdb = document.createElement('a');
          lienTmdb.href = 'https://www.themoviedb.org/movie/' + films[page].id;
          lienTmdb.target = '_blank';
          iconeTmdb = document.createElement('img');
          iconeTmdb.src = "{{ asset('images/tmdb_icone.svg') }}";
          iconeTmdb.classList.add('iconeRating');
          iconeTmdb.alt = 'icone tmdb';
          lienTmdb.textContent = "  " + parseFloat(films[page].tmdbRating).toFixed(1);
          lienTmdb.prepend(iconeTmdb);
          tmdbRating.prepend(lienTmdb);
        }
      }

      let buttonPrecedent = document.querySelector('.bouttonPrecedent');
      buttonPrecedent.classList.add('invisible');

  buttonPrecedent.addEventListener('click', () => {
    if (iconeHeart && iconeHeart.classList.contains('bi-heart-fill')) {
      films.splice(page, 1);
      iconeHeart.classList.remove('bi-heart-fill');
      iconeHeart.classList.add('bi-heart');
      if (bouttonSendListFav) bouttonSendListFav.disabled = false;
    }

    if (iconeRef && iconeRef.classList.contains('bi-x-circle-fill')) {
      films.splice(page, 1);
      iconeRef.classList.remove('bi-x-circle-fill');
      iconeRef.classList.add('bi-x-circle');
      if (bouttonSendListFav) bouttonSendListFav.disabled = false;
    }

    page--;
    titleFilm.textContent = films[page].title;
    infoFilm.textContent = films[page].releaseDate + ' - ' + films[page].genres.replace(/,/g, ", ") + ' - ' + films[page].duration;
    posterFilm.src = (films[page].posterPath !== null) ? 'https://image.tmdb.org/t/p/original' + films[page].posterPath : "{{ asset('images/pas_de_poster.jpg') }}";
    synopsis.textContent = films[page].synopsis;
    importantCrewObjet = films[page].importantCrew;
    actors = films[page].actors;
    bouttonSuivant.classList.remove('invisible');
    filmToList = films[page];

    getImportantCrew(importantCrewObjet);
    getActorsFilm(actors, actorsFilm);

    getRating(imdbRating, tmdbRating, page);

    if (page === 0) {
      buttonPrecedent.classList.add('invisible');
    }
  });


      let bouttonSuivant = document.querySelector('.bouttonSuivant');

      bouttonSuivant.addEventListener('click', () => {
        buttonPrecedent.disabled = false;

        if (iconeHeart && iconeHeart.classList.contains('bi-heart-fill')) {
      films.splice(page, 1);
      iconeHeart.classList.remove('bi-heart-fill');
      iconeHeart.classList.add('bi-heart');
      if (bouttonSendListFav) bouttonSendListFav.disabled = false;
    }

    if (iconeRef && iconeRef.classList.contains('bi-x-circle-fill')) {
      films.splice(page, 1);
      iconeRef.classList.remove('bi-x-circle-fill');
      iconeRef.classList.add('bi-x-circle');
      if (bouttonSendListFav) bouttonSendListFav.disabled = false;
    }

        page++;
        titleFilm.textContent = films[page].title;
        infoFilm.textContent = films[page].releaseDate + ' - ' + films[page].genres.replace(/,/g, ", ") + ' - ' + films[page].duration;
        posterFilm.src = (films[page].posterPath !== null) ? 'https://image.tmdb.org/t/p/original' + films[page].posterPath : "{{ asset('images/pas_de_poster.jpg') }}";
        synopsis.textContent = films[page].synopsis;
        importantCrewObjet = films[page].importantCrew;
        actors = films[page].actors;
        buttonPrecedent.classList.remove('invisible');
        filmToList = films[page];

        getImportantCrew(importantCrewObjet);
        getActorsFilm(actors, actorsFilm);
        getRating(imdbRating, tmdbRating, page);

        if (page === films.length - 1) {
          bouttonSuivant.addEventListener('click', () => {
            spinner.classList.remove('visually-hidden');
            bouttonSuivant.classList.add('py-1');
            arrowRight.classList.add('visually-hidden');
            window.location.href = '{{ path('app_home_more') }}'
            bouttonSuivant.setAttribute('disabled');
          })
        }
      });

       function showMessage(type, message) {
         alertContainer = document.getElementById('notifications-container');

        // Créer l'élément d'alerte
         alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
        alertDiv.setAttribute('role', 'alert');

        // Ajouter des styles pour l'animation et l'apparence
        alertDiv.style.opacity = '0';
        alertDiv.style.transform = 'translateY(-20px)';
        alertDiv.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
        alertDiv.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)';
        alertDiv.style.marginBottom = '10px';

        // Ajouter le message
        alertDiv.textContent = message;

        // Ajouter le bouton de fermeture
         closeButton = document.createElement('button');
        closeButton.className = 'btn-close';
        closeButton.setAttribute('data-bs-dismiss', 'alert');
        closeButton.setAttribute('aria-label', 'Close');
        alertDiv.appendChild(closeButton);

        // Ajouter l'alerte au conteneur
        alertContainer.appendChild(alertDiv);

        // Déclencher l'animation d'entrée (après un court délai pour permettre au navigateur de traiter l'ajout au DOM)
        setTimeout(() => {
          alertDiv.style.opacity = '1';
          alertDiv.style.transform = 'translateY(0)';
        }, 10);

        // Auto-fermeture après 5 secondes
        setTimeout(() => {
          // Animation de sortie
          alertDiv.style.opacity = '0';
          alertDiv.style.transform = 'translateY(-20px)';

          // Supprimer l'élément après la fin de l'animation
          setTimeout(() => {
            alertDiv.remove();
          }, 300);
        }, 5000);

        // Gérer la fermeture manuelle avec animation
        closeButton.addEventListener('click', (e) => {
          e.preventDefault();
          alertDiv.style.opacity = '0';
          alertDiv.style.transform = 'translateY(-20px)';

          setTimeout(() => {
            alertDiv.remove();
          }, 300);
        });
      }

    if(bouttonSendListFav){
      bouttonSendListFav.addEventListener('click', () => {
        // Désactiver le bouton pendant l'envoi pour éviter double-clic
        bouttonSendListFav.disabled = true;
        // Récuperation des données
        let dataToSend = filmToList;
        //visualisation des données envoyées pour le debug
        console.log('Donnees envoyees :', dataToSend);

        if (iconeHeart.classList.contains('bi-heart')) {
          // --- Requête AJAX avec Fetch API  ---
          fetch('{{ path('app_save_data') }}', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json', // Indique qu'on envoie du JSON
              'Accept': 'application/json', // Indique qu'on attend du JSON en retour
              'X-CSRF-TOKEN': '{{ csrf_token('save_favorite') }}' // Token CSRF pour la sécurité
            },
            body: JSON.stringify(dataToSend)
          })
            .then(response => {
              console.log('Réponse brute :', response);
              // Vérifie si la réponse HTTP est OK (status 2xx)
              if (!response.ok) {
                // Si le serveur retourne une erreur
                return response.json().then(errorData => {
                  throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);
                });
              }
              return response.json(); // Convertit la réponse JSON en objet JS
            })
            .then(data => {
              // Traitement en cas de succès
              if (data.status === 'success') {
                showMessage('success', data.message);
                console.log('Succès:', data.message);
                //Changement de l'apparence du bouton
                iconeHeart.classList.remove('bi-heart'); // Enlever l'ancienne classe d'incone
                iconeHeart.classList.add('bi-heart-fill'); // Ajouter la nouvelle icone pour montrer que l'ajout a été fait
                bouttonSendListFav.disabled = false; // Réactiver le bouton à la fin
              } else {
                // Gérer le cas où le serveur retourne un statut 'error'
                throw new Error(data.message || 'Une erreur logique est survenue.');
              }
            })
            .catch(error => {
              // Traitement en cas d'erreur
              showMessage('error', error.message);
              console.error('Erreur AJAX:', error);
              console.error('Erreur: ' + error.message);
              // Réactiver le bouton en cas d'erreur pour permettre une nouvelle tentative
              bouttonSendListFav.disabled = false;
              iconeHeart.classList.remove('bi-heart-fill'); // reinitialise l'icone
              iconeHeart.classList.add('bi-heart');
            });

        } else {

          fetch('{{ path('app_remove_data') }}', { // Utilise la route Symfony
            method: 'POST',
            headers: {
              'Content-Type': 'application/json', // Indique qu'on envoie du JSON
              'Accept': 'application/json', // Indique qu'on attend du JSON en retour
              'X-CSRF-TOKEN': '{{ csrf_token('remove_favorite') }}'
            },
            body: JSON.stringify(dataToSend)
          })
            .then(response => {
              console.log('Réponse brute :', response);
              // Vérifie si la réponse HTTP est OK (status 2xx)
              if (!response.ok) {
                // Si le serveur retourne une erreur (4xx, 5xx), on la propage
                return response.json().then(errorData => {
                  throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);
                });
              }
              return response.json(); // Convertit la réponse JSON en objet JS
            })
            .then(data => {
              // Traitement en cas de succès (réponse JSON du contrôleur)
              if (data.status === 'success') {
                showMessage('success', data.message);
                console.log('Succès:', data.message);
                // --- Changer l'apparence du bouton ---
                iconeHeart.classList.remove('bi-heart-fill'); // Enlever l'ancienne classe
                iconeHeart.classList.add('bi-heart'); // Ajouter nouvelle classe (ex: Bootstrap vert)=
                // Optionnel: Garder le bouton désactivé ou le réactiver après un délai
                bouttonSendListFav.disabled = false; // Réactiver si besoin
              } else {
                // Gérer le cas où le serveur retourne un statut 'error' même avec HTTP 200 (moins courant)
                throw new Error(data.message || 'Une erreur logique est survenue.');
              }
            })
            .catch(error => {
              // Traitement en cas d'erreur (réseau, JSON invalide, erreur serveur explicite)
              showMessage('error', error.message);
              console.error('Erreur AJAX:', error);
              console.error('Erreur: ' + error.message);

              // Réactiver le bouton en cas d'erreur pour permettre une nouvelle tentative
              bouttonSendListFav.disabled = false;
              iconeHeart.classList.remove('bi-heart'); // Assurer qu'il n'est pas vert
              iconeHeart.classList.add('bi-heart-fill'); // Mettre en rouge par exemple
            });
          }
        }

    )}

    if(bouttonSendListRef){
      bouttonSendListRef.addEventListener('click', () => {
        // Désactiver le bouton pendant l'envoi pour éviter double-clic
        bouttonSendListRef.disabled = true;

        // Récuperation des données
        let dataToSend = filmToList;

        console.log('Donnees envoyees :', dataToSend);

        if (iconeRef.classList.contains('bi-x-circle')) {
          // --- Requête AJAX avec Fetch API (JavaScript moderne) ---
          fetch('{{ path('app_save_data_refusal') }}', { // Utilise la route Symfony
            method: 'POST',
            headers: {
              'Content-Type': 'application/json', // Indique qu'on envoie du JSON
              'Accept': 'application/json', // Indique qu'on attend du JSON en retour
              'X-CSRF-TOKEN': '{{ csrf_token('save_refusal') }}'
            },
            body: JSON.stringify(dataToSend)
          })
            .then(response => {
              console.log('Réponse brute :', response);
              // Vérifie si la réponse HTTP est OK (status 2xx)
              if (!response.ok) {
                // Si le serveur retourne une erreur (4xx, 5xx), on la propage
                return response.json().then(errorData => {
                  throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);
                });
              }
              return response.json(); // Convertit la réponse JSON en objet JS
            })
            .then(data => {
              // Traitement en cas de succès (réponse JSON du contrôleur)
              if (data.status === 'success') {
                showMessage('success', data.message);
                console.log('Succès:', data.message);
                // --- Changer l'apparence du bouton ---
                iconeRef.classList.remove('bi-x-circle'); // Enlever l'ancienne classe
                iconeRef.classList.add('bi-x-circle-fill'); // Ajouter nouvelle classe (ex: Bootstrap vert)=
                // Optionnel: Garder le bouton désactivé ou le réactiver après un délai
                bouttonSendListRef.disabled = false; // Réactiver si besoin
              } else {
                // Gérer le cas où le serveur retourne un statut 'error' même avec HTTP 200 (moins courant)
                throw new Error(data.message || 'Une erreur logique est survenue.');
              }
            })
            .catch(error => {
              // Traitement en cas d'erreur (réseau, JSON invalide, erreur serveur explicite)
              showMessage('error', error.message);
              console.error('Erreur AJAX:', error);
              console.error('Erreur: ' + error.message);

              // Réactiver le bouton en cas d'erreur pour permettre une nouvelle tentative
              bouttonSendListRef.disabled = false;
              iconeRef.classList.remove('bi-x-circle-fill'); // Assurer qu'il n'est pas vert
              iconeRef.classList.add('bi-x-circle'); // Mettre en rouge par exemple
            });

        } else {

          fetch('{{ path('app_remove_data_refusal') }}', { // Utilise la route Symfony
            method: 'POST',
            headers: {
              'Content-Type': 'application/json', // Indique qu'on envoie du JSON
              'Accept': 'application/json', // Indique qu'on attend du JSON en retour
              'X-CSRF-TOKEN': '{{ csrf_token('remove_refusal') }}'
            },
            body: JSON.stringify(dataToSend)
          })
            .then(response => {
              console.log('Réponse brute :', response);
              // Vérifie si la réponse HTTP est OK (status 2xx)
              if (!response.ok) {
                // Si le serveur retourne une erreur (4xx, 5xx), on la propage
                return response.json().then(errorData => {
                  throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);
                });
              }
              return response.json(); // Convertit la réponse JSON en objet JS
            })
            .then(data => {
              // Traitement en cas de succès (réponse JSON du contrôleur)
              if (data.status === 'success') {
                showMessage('success', data.message);
                console.log('Succès:', data.message);
                // --- Changer l'apparence du bouton ---
                iconeRef.classList.remove('bi-x-circle-fill'); // Enlever l'ancienne classe
                iconeRef.classList.add('bi-x-circle'); // Ajouter nouvelle classe (ex: Bootstrap vert)=
                // Optionnel: Garder le bouton désactivé ou le réactiver après un délai
                bouttonSendListRef.disabled = false; // Réactiver si besoin
              } else {
                // Gérer le cas où le serveur retourne un statut 'error' même avec HTTP 200 (moins courant)
                throw new Error(data.message || 'Une erreur logique est survenue.');
              }
            })
            .catch(error => {
              // Traitement en cas d'erreur (réseau, JSON invalide, erreur serveur explicite)
              showMessage('error', error.message);
              console.error('Erreur AJAX:', error);
              console.error('Erreur: ' + error.message);

              // Réactiver le bouton en cas d'erreur pour permettre une nouvelle tentative
              bouttonSendListRef.disabled = false;
              iconeRef.classList.remove('bi-x-circle'); // Assurer qu'il n'est pas vert
              iconeRef.classList.add('bi-x-circle-fill'); // Mettre en rouge par exemple
            });

        }

      })

    }
    })
</script>

{% endblock %}
